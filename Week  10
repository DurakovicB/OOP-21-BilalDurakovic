//mooc package
//UserInterface.java
package mooc.ui;
public interface UserInterface {
     void update();
}
//TextUserInterface.java
package mooc.ui;

public class TextUserInterface implements UserInterface{
    @Override
    public void update() {
        System.out.println("Updating the user interface");
    }
}
//ApplicationJava
package mooc.logic;

import mooc.ui.UserInterface;

public class ApplicationLogic {
    private UserInterface ui;
    public ApplicationLogic(UserInterface ui)
    {
        this.ui=ui;
    }
    public void execute(int howManyTimes)
    {
        for(int i=0;i<howManyTimes;i++) {
            System.out.println("The application logic works.");
            this.ui.update();
        }
    }
}
//Moving
//Thing.java
package moving.domain;
public interface Thing {
    int getVolume();
}

//Item.java
package moving.domain;
import moving.domain.Thing;
public class Item implements moving.domain.Thing,Comparable<Item>{
    private String name;
    private int volume;
    public Item(String name,int volume)
    {
        this.name=name;
        this.volume=volume;
    }
    public String getName()
    {
        return this.name;
    }
    @Override
    public String toString()
    {
        return this.name +" ("+volume +" dm^3)";
    }
    @Override
    public int getVolume() {
        return 0;
    }

    @Override
    public int compareTo(Item i) {
        if(this.volume<i.volume)return -1;
        else if(this.volume==i.volume)return 0;
        else return 1;
    }
}

//Box,java
package moving.domain;
import moving.domain.Thing;

import java.util.*;

public class Box implements Thing{
    private int maxCapacity;
    public ArrayList<Thing> list=new ArrayList<Thing>();
    public Box(int maxCapacity)
    {
        this.maxCapacity=maxCapacity;
    }
    public boolean addThing(Thing thing)
    {
        if(this.list.size()!=this.maxCapacity)
        this.list.add(thing);
        else return false;
        return true;
    }
    @Override
    public int getVolume() {
        return this.list.size();
    }
}

//Packer.java
package moving.logic;
import moving.domain.*;
import java.util.*;
public class Packer {
    private int boxVolume;

    public Packer(int boxVolume)
    {
        this.boxVolume=boxVolume;
    }
    public List<Box> packthings(List<Thing> things)
    {
        List<Box> list=new ArrayList<Box>();


        return list;
    }
}

//Sensors
//Thermometer.java
import java.util.Random;

public class Thermometer implements Sensor{
    private boolean on=true;
    private Random rand=new Random();
    @Override
    public boolean isOn() {
        return on;
    }

    @Override
    public void on() {

    }

    @Override
    public void off() {

    }

    @Override
    public int measure() {
            if (this.isOn()) return rand.nextInt(60) - 30;
            else throw new IllegalStateException("thermometer not on");
    }
}
//AverageSensor.java
import java.util.ArrayList;
import java.util.List;

public class AverageSensor implements Sensor{
    private ArrayList<Sensor> list=new ArrayList<Sensor>();
    public void addSensor(Sensor sensor)
    {
        this.list.add(sensor);
    }
    @Override
    public boolean isOn() {
        for(Sensor s:this.list)
            if(!s.isOn()) return false;
        return true;
    }

    @Override
    public void on() {
        for(Sensor s:this.list) s.on();
    }

    @Override
    public void off() {
        for(Sensor s:this.list) s.off();
    }

    @Override
    public int measure() {
        int sum=0;
        for(Sensor s:this.list) sum+=s.measure();
        return (int)(sum/ this.list.size());
    }
    public List<Integer> readings()
    {
        List<Integer> readings=new ArrayList<Integer>();
        for(Sensor s:list)
            readings.add(s.measure());
        return readings();
    }
}
//ConstantSensor.java
public class ConstantSensor implements Sensor{
    private int measure;
    public ConstantSensor(int measure)
    {
        this.measure=measure;
    }
    @Override
    public boolean isOn() {
        return true;
    }

    @Override
    public void on() {

    }

    @Override
    public void off() {
    }

    @Override
    public int measure() {
        return this.measure;
    }
}
//Printer
//Printer.java
import java.io.File;
import java.util.*;
public class Printer {
    private String fileName;
    private Scanner read;
    public Printer(String fileName) throws Exception
    {
        File f=new File(fileName);
        this.fileName=fileName;
        this.read=new Scanner(f,"UTF-8");
    }
    public void printLinesWhichContain(String word)
    {
        if(word==""||word==" ")
        {
            while(this.read.hasNext())System.out.println(read.next());
        }
        else
        while(this.read.hasNext())
        {
            String line= read.nextLine();
            if(line.contains(word))System.out.println(line);
        }
    }
}
// File analysis
//Analysis.java
package file;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import java.util.*;

public class Analysis {
    private File f= new File("examplefile.txt");
    private Scanner read;
    public Analysis(File f) throws FileNotFoundException {
        this.f=f;
        this.read=new Scanner(this.f);
    }
    public int lines() throws FileNotFoundException {
        Scanner scan2=new Scanner(this.f);
        int size=0;
        while(scan2.hasNext())
        {
            scan2.nextLine();
            size++;
        }
        return size;

    }
    public int characters() throws FileNotFoundException
    {
        Scanner scan2=new Scanner(this.f);
        int size=0;
        while(scan2.hasNext())
        {
            int linesize=0;
            for(char c:scan2.next().toCharArray())
                linesize++;
            size+=linesize;
            
        }
        return size;
    }
}
//PersonalMultipleEntryDictionary
import dictionary.MultipleEntryDictionary;

import java.util.*;

public class PersonalMultipleEntryDictionary implements MultipleEntryDictionary {
    private Map<String,HashSet<String>> list=
            new HashMap<String,HashSet<String>>();

    public void add(String word, String entry)
    {
        if(this.list.get(word)==null)
        {
            this.list.put(word, new HashSet<String>());
            this.list.get(word).add(entry);
        }
        else
        {
            this.list.get(word).add(entry);
        }
    }
    public Set<String> translate(String word)
    {
        if(this.list.get(word)==null)return null;
        return this.list.get(word);
    }
    public void remove(String word)
    {
        this.list.remove(word);
    }


}
//////////////////////////////////////////////////Farm
//BulkTank.java
package farmsimulator;

public class BulkTank {
    protected double capacity=2000;
    protected double volume;
    public BulkTank()
    {
        this.capacity=2000;
    }
    public String toString()
    {
        return this.volume+"/"+this.capacity;
    }
    public BulkTank(double capacity)
    {
        this.capacity=capacity;
    }

    public double getCapacity()
    {
        return this.capacity;
    }

    public double getVolume()
    {
        return this.volume;
    }

    public double howMuchFreeSpace()
    {
        return this.capacity-this.volume;
    }

    public void addToTank(double amount)
    {
        this.volume+=amount;
        if(this.volume>capacity)volume=capacity;
    }

    public double getFromTank(double amount)
    {
        if(this.volume<amount)
        {
            double temp=volume;
            volume=0;
            return temp;

        }
        else
        {
            this.volume-=amount;
            return amount;
        }
    }
}
//Cow.java
package farmsimulator;

import java.util.Random;

public class Cow extends BulkTank implements Milkable,Alive{
    private String name;
    private Random rand=new Random();
    private static final String[] NAMES = new String[]{
            "Anu", "Arpa", "Essi", "Heluna", "Hely",
            "Hento", "Hilke", "Hilsu", "Hymy", "Ihq", "Ilme", "Ilo",
            "Jaana", "Jami", "Jatta", "Laku", "Liekki",
            "Mainikki", "Mella", "Mimmi", "Naatti",
            "Nina", "Nyytti", "Papu", "Pullukka", "Pulu",
            "Rima", "Soma", "Sylkki", "Valpu", "Virpi"};
    public Cow(){
        this.capacity= 30-rand.nextInt(5);
        this.name= this. NAMES[rand.nextInt(NAMES.length)];
    }
    public Cow(String name)
    {
        this.capacity= 30-rand.nextInt(5);
        this.name=name;
    }
    public double getCapacity()
    {
        return this.capacity;
    }
    public double getAmount()
    {
        return super.getVolume();
    }
    public String toString()
    {
        return name + " "+super.toString();
    }

    @Override
    public void liveHour() {
        double amount=0.7 + (2 - 0.7) * this.rand.nextDouble();
        volume+=amount;

    }

    @Override
    public void milk() {
        this.volume=0;
    }
}
//Milkable.java
package farmsimulator;

public interface Milkable {
    public void milk();
}

//MilkinRobot.java
package farmsimulator;

public class MilkingRobot {
    private BulkTank tank=new BulkTank();

    public MilkingRobot()
    {

    }
    public BulkTank getBulkTank()
    {
        return this.tank;
    }
    public void setBulkTank(BulkTank tank)
    {
        this.tank=tank;
    }
    public void milk(Milkable milkable)
    {
        try {
            milkable.milk();
        }
        catch(IllegalStateException e)
        {
            System.out.println("No tank has been fixed");
        }
    }
}

