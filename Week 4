  //70 Combining ArrayLists
  	public static void combine(ArrayList<Integer> lista1, ArrayList<Integer> lista2)
	{
	    for(int number:lista2)lista1.add(number);
	    
	}
  //71 Smart combining
  	public static void combine(ArrayList<Integer> lista1, ArrayList<Integer> lista2)
	{
	    for(int number:lista2)if(!(lista1.contains(number)))lista1.add(number);
	}
  //72 Account
  	    //72.1
        Account newAcc = new Account("Bilal's acc",100);
        newAcc.deposit(20);
        System.out.println(newAcc);
        //72.2
        Account newAcc = new Account("Matt's account",1000);
        Account newAcc2= new Account("My account",0);
        newAcc.withdraw(100);
        newAcc2.deposit(100);
        System.out.println(newAcc);
        System.out.println(newAcc2);
        //73.3
        Account newAcc = new Account("A",100);
        Account newAcc2= new Account("B",0);
        Account newAcc3= new Account("C",0);
        transfer(newAcc,newAcc2,50);
        transfer(newAcc2,newAcc3,25);
   //73 Product
       	public static class Product{
	    private double price;
	    private int amount;
	    private String name;
	    
	    public Product(String nameAtStart,double PriceAtStart, int amountAtStart)
	    {
	        this.name=nameAtStart;
	        this.price=PriceAtStart;
	        this.amount=amountAtStart;
	    }
	    public void printProduct(){
	        System.out.println(this.name+", price "+this.price+" amount "+this.amount);
	    }
	}
	//74 Multiplier
	public class Multiplier
{
    private int Num;
    public static Multiplier(int number)
    {
        this.Num=number;
    }
    public int multiply(int nextnumber)
    {
        return nextnumber*this.Num;
    }
}
	//75 Decrease
	public void decrease() {
        this.value --;
    }
	//75.1,2
	   public void decrease() {
        if(this.value>0)this.value --;
    }
    	//75.3 
	public void reset()
    {
        this.value=0;
    }
    	//75.4 init value
	private int init;
	//constructor changes 
	public DecreasingCounter(int valueAtStart) {
        this.value = valueAtStart;
        this.init=valueAtStart;
    }
    	    public void setInitial();
	    {
	    this.value=this.init;
	    }
	 //76 Menu
	     public static class Menu{
        private ArrayList<String> meals;
        public  Menu(){
            this.meals=new ArrayList<String>();
        }
        
        public   void addMeal(String meal)
        {
            this.meals.add(meal);
        }
        
        public    void printMeals()
        {
            for(String meal:this.meals)System.out.println(meal);
        }
        public   void clearMenu()
        {
            this.meals= new ArrayList<String>();
        }
    }
    //77 Lyyra - card
    import java.util.*;


public class Main {
    public static void main(String[] args) {
       LyyraCard Pekka=new LyyraCard(20.0);
       LyyraCard Brian=new LyyraCard(30.0);

       Pekka.payGourmet();
       Brian.payEconomical();
       
       System.out.println(Pekka);
       System.out.println(Brian);
       
       Pekka.loadMoney(20);
       Brian.payGourmet();
              
       System.out.println(Pekka);
       System.out.println(Brian);
       
       Pekka.payEconomical();
       Pekka.payEconomical();
       Brian.loadMoney(50);
       
              
       System.out.println(Pekka);
       System.out.println(Brian);
       
       
    }

public static class LyyraCard{
    private double balance;
    public LyyraCard(double balanceAtStart){
        this.balance=balanceAtStart;
    }
    public String toString(){
        return ("The card has "+balance+" euros ");
    }
    public void payEconomical() {
        if(this.balance>=2.5)
        this.balance-=2.5;
    }
    public void payGourmet() {
        if(this.balance>4)
        this.balance-=4;
    }
    public void loadMoney(double Amount)
    {
        if(!(Amount<0))
        {
        this.balance+=Amount;
        if(this.balance>150)this.balance=150;
        }
    }
}
}

//78 Clock using a counter
    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */
package oop;

/**
 *
 * @author Bilal
 */
import java.util.*;


public class Main {
    public static void main(String[] args) {
               BoundedCounter minutes = new BoundedCounter(59);
        BoundedCounter hours = new BoundedCounter(23);

        int i = 0;
        while ( i < 121 ) {
            System.out.println( hours + ":" + minutes);   // the current time printed
            minutes.next();
            if(minutes.getValue()==0)
            {
                hours.next();
            }
            i++;
        }
    }

public static class BoundedCounter{
    private int value;
    private int upperBound;
    
    public BoundedCounter(int limit)
    {
        this.upperBound=limit;
    }
    public void next()
    {
        if(this.value==this.upperBound)this.value=0;
        else this.value++;
    }
    public String toString()
    {
        String returned=this.value+"";
        if(this.value<10)
        returned="0"+this.value;
        if(this.value>10)
            returned="1"+(this.value-10);
    return returned;
    }
    public int getValue(){
        return this.value;
    }
}
}
	//79 Number Statistics
	final:
	public static class NumberStatistics
{
    private int amountOfNumbers;
    private int sum;
    private double average;
    
    public void addNumber(int number)
    {
        this.amountOfNumbers++;
        this.sum+=number;
        this.average=(double)this.sum/amountOfNumbers;
    }
    public int amountOfNumbers(){
        return this.amountOfNumbers;
    }
    public int sum()
    {return this.sum;}
    public double average()
    {return this.average;}
    
}
//80 Rolling the dice
public static class Dice{
    private int sides;
    private Random random ; 
    public Dice(int numberOfSides){
        this.sides=numberOfSides;
        random=new Random(); 

    }
    public int roll(){
    return this.random.nextInt(this.sides)+1;
    }
}
//81 Password randomizer
public static class passwordrandomizer{
    private int length;
    private String password="";
    private Random random=new Random();
    public  passwordrandomizer(int passlength)
    {
        this.length=passlength;
    }
    public String createPassword()
    {
        this.password="";
        for(int i=0;i<this.length;i++)
       this.password+=(char)(random.nextInt(26)+'a');
        return this.password;
    }
}
//82 Lottery neuzubillah
public static class LotteryNumbers{
        private ArrayList<Integer> numbers;
        public LotteryNumbers(){
            this.numbers=new ArrayList<Integer>();
            this.drawNumbers();
        }
        public ArrayList<Integer> numbers(){
            return this.numbers;
        }
        public void drawNumbers(){
           Random random=new Random();
           for(int i=0;i<7;i++)
           {
               int nextnumber=random.nextInt(38)+1;
           if(this.containsNumber(nextnumber))
           {i--;continue;}
           this.numbers.add(nextnumber); 
           }
        }
        public boolean containsNumber(int number){
            if(this.numbers.contains(number))
                return true;
            return false;
        }
    }
//83 Game logic for Hangman
	//Seems complex for now
