/// RegistrationPlate
public class RegistrationPlate {
    // ATTENTION: the object variable types are final, meaning that their value cannot be changed!
    private final String regCode;
    private final String country;
    public String GetRegCode()
    {
        return this.regCode;
    }
    public String GetCountry()
    {
        return this.country;
    }
    public RegistrationPlate(String regCode, String country) {
       this.regCode = regCode;
       this.country = country;
    }

    public String toString(){
        return country+ " " +regCode;
    }
    @Override
    public boolean equals(Object object)
    {
        if(object==null) return false;
        
        if(this.getClass()!=object.getClass()) return false;
        
        RegistrationPlate compared=(RegistrationPlate) object;
        
        if(this.regCode.equals(compared.GetRegCode()) && this.country.equals(compared.GetCountry()))
        return true;
        else return false;
    }
    
    public int hashCode()
    {
        if(this.country==null || this.regCode==null )return 1;
        
        int counter=0;
        for(int i=0;i<this.regCode.length();i++)
        {
            char c=this.regCode.charAt(i);
            if(c=='a' || (c=='b'))counter++;
        }
        int hashCode=this.country.length()*this.regCode.length()+counter;
        return hashCode;
    }
}
//VEHICLE REGISTER
import java.util.*;
public class VehicleRegister
{
    HashMap<RegistrationPlate,String> owners = new HashMap<RegistrationPlate,String>();
    
    public boolean add(RegistrationPlate plate, String owner)
    {
        if(owners.get(plate)==null)
        {
        this.owners.put(plate, owner);
        return true;
        }
        else return false;
    }
    
    public String get(RegistrationPlate plate)
    {
        return this.owners.get(plate);
    }
    public boolean delete(RegistrationPlate plate)
    {
        if(plate.hashCode()==1) return false;
        this.owners.remove(plate);
        return true ;
    }
    public void printRegistrationPlates()
    {
        for(RegistrationPlate plate:this.owners.keySet())
        System.out.println(plate);
        
    }
    public void printOwners()
    {
        for(String owner:this.owners.values())
        System.out.println(owner);
    }
}
///// 10: NATIONAL SERVICE:
//Civil service:
public class CivilService implements NationalService
{
    private int daysLeft;
    public CivilService()
    {
        this.daysLeft=362;
    }
    public int getDaysLeft()
    {
        return this.daysLeft;
    }
    public void work()
    {
        this.daysLeft--;
    }
}
///MilitaryService:
public class MilitaryService implements NationalService
{
  private int daysLeft;
  public MilitaryService (int days)
  {
    this.daysLeft = days;
  }
  public int getDaysLeft ()
  {
    return this.daysLeft;
  }
  public void work ()
  {
    this.daysLeft--;
    if (this.daysLeft < 0)
    {
     this.daysLeft++;
     System.out.println("Error, no days left");
    }
  }
}
///////////////7
//ToBeStored
//book.java:
public class Book implements ToBeStored
{
    private double weight;
    private String writer;
    private String name;
    
    public Book(String Writer, String Name,double Weight)
    {
        this.weight=Weight;
        this.writer=Writer;
        this.name=Name;
    }
    public double weight()
    {
        return this.weight;
    }
    public String toString()
    {
        return this.writer+": "+this.name;
    }
}
//CD.java:
public class CD implements ToBeStored
{
    public double weight()
    {
        return 0.1;
    }
    private String artist;
    private String title;
    private int publishingYear;
    
    public CD(String Artist, String Title, int Publishingyear)
    {
        this.artist=Artist;
        this.title =Title;
        this.publishingYear=Publishingyear;
    }
    @Override
    public String toString()
    {
        return artist +": "+title+", "+publishingYear;
    }
}
//Box.java
import java.util.*;
public class Box
{
 private double maxweight;
 private int maxcapacity;
 private ArrayList<ToBeStored> things=new ArrayList<ToBeStored>();
 public Box(double maxw)
 {
     this.maxweight=maxw;
 }
public void add(ToBeStored thing)
{
    if(this.totalweight()+thing.weight()<maxweight ) 
    things.add(thing);
}
 private double totalweight()
 {
     double total=0;
     for(ToBeStored thing:things)
     {
        total+=thing.weight();
     }
     return total;
 }
 public String toString()
 {
     return "Box: "+things.size()+" things, total weight: "+totalweight()+" kg";
 }
}
//OnlineShop
//Storehouse.java
import java.util.*;
public class Storehouse
{
    private Map<String, Integer> prices = new HashMap<String, Integer>();
    private Map<String, Integer> stocks = new HashMap<String, Integer>();
    
    public void addProduct(String product, int price, int stock)
    {
        this.prices.put(product, price);
        this.stocks.put(product, stock);
    }
    public int price(String product)
    {
        if(this.prices.get(product)!=null) return -99;
        else return prices.get(product);
    }
    public int stock(String product)
    {
        if(this.stocks.get(product)==null)return 0;
        else return stocks.get(product);
    }
    public boolean take(String product)
    {
        if(this.stocks.get(product)==null || this.stocks.get(product)==0)return false;
        else 
        {
           this.stocks.put(product, this.stocks.get(product)-1);
           return true;
        }
    }
    public Set<String> products()
    {
        Set<String> products= this.prices.keySet();
        return products;
    }
    
}
//Purchase.java
public class Purchase
{
    private String product;
    private int amount, unitPrice;
    public Purchase(String product, int amount,int unitPrice)
    {
        this.product=product;
        this.amount=amount;
        this.unitPrice=unitPrice;
    }
    public int price()
    {
        return this.amount*this.unitPrice;
    }
    public void increaseAmount()
    {
        this.amount++;
    }
    public String toString()
    {
        return product +": "+amount;
    }
}
//ShoppingBasket.java
import java.util.*;
public class ShoppingBasket
{
    private Map<String, Purchase> map= new HashMap<String,Purchase>();
    public void add(String Product, int price)
    {
        if(this.map.get(Product)!=null) this.map.get(Product).increaseAmount();
        else
        this.map.put(Product,new Purchase(Product,1,price));
    }
    public int price()
    {
        int price=0;
        for(String product:map.keySet())
            price+=map.get(product).price();
        return price;
    }
    public void print()
    {
        for(Purchase pur:this.map.values())
        System.out.println(pur);
    }
//Shop.java 
import java.util.*;

public class Shop {

    private Storehouse store;
    private Scanner reader;

    public Shop(Storehouse store, Scanner reader) {
        this.store = store;
        this.reader = reader;
    }

    // the method to deal with a customer in the shop
    public void manage(String customer) {
        ShoppingBasket basket = new ShoppingBasket();
        System.out.println("Welcome to our shop " + customer);
        System.out.println("below is our sale offer:");

        for (String product : store.products()) {
            System.out.println( product );
        }

        while (true) {
            System.out.print("what do you want to buy (press enter to pay):");
            String product = reader.nextLine();
            if (product.isEmpty()) {
                break;
            }
            else if(store.stock(product)>0)
            {
            basket.add(product, store.price(product));
            store.take(product);
            }
            
            // here, you write the code to add a product to the shopping basket, if the storehouse is not empty
            // and decreases the storehouse stocks
            // do not touch the rest of the code!

        }

        System.out.println("your purchases are:");
        basket.print();
        System.out.println("basket price: " + basket.price());
    }
}
//GEnerics
//Rich first, poor last
//Person.java
public class Person implements Comparable<Person>
{
    private String Name;
    private int salary;
    
    @Override 
    public int compareTo(Person person)
    {
        if(person == null ) return 0;
        
        return this.salary-person.getSalary();
    }
    public int getSalary()
    {
        return this.salary;
    }
}


